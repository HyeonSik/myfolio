function init(){addLogoClickEvent(),addStartEvent(),addLoginEvent(),addJoinEvent(),addLogoutEvent(),addUploadButtonEvent()}function addLogoClickEvent(){$("#nav_logo_image").click(function(){location.href="/"})}function addStartEvent(){$(".start-portfolio").click(function(){console.log("Start!")})}function addUploadButtonEvent(){$("#file-upload").fileupload({dataType:"json",progressall:function(){console.log("progress")},done:function(o,n){console.log("upload image url: ",n.url+"/"+n.result)}})}function addLoginEvent(){$("#login_modal_login_btn").click(function(){var o,n=$("#login_modal_input_id").val(),a=$("#login_modal_input_pw").val();return n?a?(o={id:n,pw:a},void $.ajax({url:"/ajax/user/login",type:"POST",data:o,error:function(){alert("Login fail! (Server error)")},success:function(o){1===o.code&&"login success"===o.msg?($("#login_modal").modal("hide"),location.reload(!0)):alert("Check your ID and Password!")}})):void alert("Input your Password!"):void alert("Input your ID!")})}function addJoinEvent(){$("#join_modal_join_btn").click(function(){var o,n=/^[A-Za-z0-9+]*$/,a=$("#join_modal_input_id").val(),t=$("#join_modal_input_pw").val(),i=$("#join_modal_input_pw_confirm").val(),l=$("#join_modal_input_name").val();return a&&n.test(a)?t&&n.test(t)?l?t!==i?void alert("Input your password."):(o={id:a,pw:t,name:l},void $.ajax({url:"/ajax/user/join",type:"POST",data:o,error:function(){alert("Signup fail! (Server error)")},success:function(){alert("Signup success!"),$("#join_modal").modal("hide"),location.reload(!0)}})):void alert("Input your name."):void alert("Password is allowed only number and alphabet."):void alert("ID is allowed only number and alphaber.")})}function addLogoutEvent(){$("#nav_logout_btn").click(function(){$.ajax({url:"/ajax/user/logout",type:"POST",error:function(){alert("Logout fail! (Server error)")},success:function(){alert("Logout success!"),location.reload(!0)}})})}$(document).ready(function(){init()});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIk1haW4uanMiLCJUZW1wbGF0ZS5qcyJdLCJuYW1lcyI6WyJpbml0IiwiYWRkTG9nb0NsaWNrRXZlbnQiLCJhZGRTdGFydEV2ZW50IiwiYWRkTG9naW5FdmVudCIsImFkZEpvaW5FdmVudCIsImFkZExvZ291dEV2ZW50IiwiYWRkVXBsb2FkQnV0dG9uRXZlbnQiLCIkIiwiY2xpY2siLCJsb2NhdGlvbiIsImhyZWYiLCJjb25zb2xlIiwibG9nIiwiZmlsZXVwbG9hZCIsImRhdGFUeXBlIiwicHJvZ3Jlc3NhbGwiLCJkb25lIiwiZSIsImRhdGEiLCJ1cmwiLCJyZXN1bHQiLCJwYXJhbXMiLCJpbnB1dElkIiwidmFsIiwiaW5wdXRQdyIsImlkIiwicHciLCJhamF4IiwidHlwZSIsImVycm9yIiwiYWxlcnQiLCJzdWNjZXNzIiwiY29kZSIsIm1zZyIsIm1vZGFsIiwicmVsb2FkIiwicmVnVGVzdCIsImlucHV0UHdDb25maXJtIiwiaW5wdXROYW1lIiwidGVzdCIsIm5hbWUiLCJkb2N1bWVudCIsInJlYWR5Il0sIm1hcHBpbmdzIjoiQUFJQSxRQUFTQSxRQUNMQyxvQkFDQUMsZ0JBQ0FDLGdCQUNBQyxlQUNBQyxpQkFHQUMsdUJBR0osUUFBU0wscUJBQ0xNLEVBQUUsbUJBQW1CQyxNQUFNLFdBQ3hCQyxTQUFTQyxLQUFPLE1BSXZCLFFBQVNSLGlCQUNMSyxFQUFFLG9CQUFvQkMsTUFBTSxXQUV4QkcsUUFBUUMsSUFBSSxZQUlwQixRQUFTTix3QkFDTEMsRUFBRSxnQkFBZ0JNLFlBQ2RDLFNBQVUsT0FDVkMsWUFBYSxXQUNUSixRQUFRQyxJQUFJLGFBRWhCSSxLQUFNLFNBQVVDLEVBQUdDLEdBQ2ZQLFFBQVFDLElBQUkscUJBQXFCTSxFQUFLQyxJQUFJLElBQUlELEVBQUtFLFdBTS9ELFFBQVNqQixpQkFDTEksRUFBRSwwQkFBMEJDLE1BQU0sV0FDOUIsR0FFSWEsR0FGQUMsRUFBVWYsRUFBRSx5QkFBeUJnQixNQUNyQ0MsRUFBVWpCLEVBQUUseUJBQXlCZ0IsS0FHekMsT0FBS0QsR0FJQUUsR0FLTEgsR0FDSUksR0FBSUgsRUFDSkksR0FBSUYsT0FHUmpCLEdBQUVvQixNQUNFUixJQUFLLG1CQUNMUyxLQUFNLE9BQ05WLEtBQU1HLEVBQ05RLE1BQU8sV0FDSEMsTUFBTSwrQkFFVkMsUUFBUyxTQUF3QmIsR0FDWCxJQUFkQSxFQUFLYyxNQUEyQixrQkFBYmQsRUFBS2UsS0FDeEIxQixFQUFFLGdCQUFnQjJCLE1BQU0sUUFDeEJ6QixTQUFTMEIsUUFBTyxJQUVoQkwsTUFBTSx1Q0FyQmRBLE9BQU0sNEJBSk5BLE9BQU0sb0JBaUNsQixRQUFTMUIsZ0JBQ0xHLEVBQUUsd0JBQXdCQyxNQUFNLFdBQzVCLEdBS0lhLEdBTEFlLEVBQVUsa0JBQ1ZkLEVBQVVmLEVBQUUsd0JBQXdCZ0IsTUFDcENDLEVBQVVqQixFQUFFLHdCQUF3QmdCLE1BQ3BDYyxFQUFpQjlCLEVBQUUsZ0NBQWdDZ0IsTUFDbkRlLEVBQVkvQixFQUFFLDBCQUEwQmdCLEtBRzVDLE9BQUtELElBQVljLEVBQVFHLEtBQUtqQixHQUl6QkUsR0FBWVksRUFBUUcsS0FBS2YsR0FJekJjLEVBSURkLElBQVlhLE1BQ1pQLE9BQU0seUJBSVZULEdBQ0lJLEdBQUlILEVBQ0pJLEdBQUlGLEVBQ0pnQixLQUFNRixPQUdWL0IsR0FBRW9CLE1BQ0VSLElBQUssa0JBQ0xTLEtBQU0sT0FDTlYsS0FBTUcsRUFDTlEsTUFBTyxXQUNIQyxNQUFNLGdDQUVWQyxRQUFTLFdBQ0xELE1BQU0sbUJBQ052QixFQUFFLGVBQWUyQixNQUFNLFFBQ3ZCekIsU0FBUzBCLFFBQU8sV0F4QnBCTCxPQUFNLHdCQUpOQSxPQUFNLHFEQUpOQSxPQUFNLDZDQXNDbEIsUUFBU3pCLGtCQUNMRSxFQUFFLG1CQUFtQkMsTUFBTSxXQUN2QkQsRUFBRW9CLE1BQ0VSLElBQUssb0JBQ0xTLEtBQU0sT0FDTkMsTUFBTyxXQUNIQyxNQUFNLGdDQUVWQyxRQUFTLFdBQ0xELE1BQU0sbUJBQ05yQixTQUFTMEIsUUFBTyxRQTNJaEM1QixFQUFFa0MsVUFBVUMsTUFBTSxXQUNkMUM7QUNESiIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24oKSB7XG4gICAgaW5pdCgpO1xufSk7XG5cbmZ1bmN0aW9uIGluaXQoKSB7XG4gICAgYWRkTG9nb0NsaWNrRXZlbnQoKTtcbiAgICBhZGRTdGFydEV2ZW50KCk7XG4gICAgYWRkTG9naW5FdmVudCgpO1xuICAgIGFkZEpvaW5FdmVudCgpO1xuICAgIGFkZExvZ291dEV2ZW50KCk7XG5cbiAgICAvL3Rlc3QgY29kZVxuICAgIGFkZFVwbG9hZEJ1dHRvbkV2ZW50KCk7XG59XG5cbmZ1bmN0aW9uIGFkZExvZ29DbGlja0V2ZW50KCkge1xuICAgICQoJyNuYXZfbG9nb19pbWFnZScpLmNsaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgIGxvY2F0aW9uLmhyZWYgPSBcIi9cIjtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkU3RhcnRFdmVudCgpIHtcbiAgICAkKCcuc3RhcnQtcG9ydGZvbGlvJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFRPRE86IOyXrOq4sOyXkCDtj6ztirjtj7TrpqzsmKQg7Iuc7J6R7ZWY6riwIOq1rO2YhFxuICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0IVwiKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkVXBsb2FkQnV0dG9uRXZlbnQoKSB7XG4gICAgJCgnI2ZpbGUtdXBsb2FkJykuZmlsZXVwbG9hZCh7XG4gICAgICAgIGRhdGFUeXBlOiAnanNvbicsXG4gICAgICAgIHByb2dyZXNzYWxsOiBmdW5jdGlvbiAoZSwgZGF0YSkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJwcm9ncmVzc1wiKTtcbiAgICAgICAgfSxcbiAgICAgICAgZG9uZTogZnVuY3Rpb24gKGUsIGRhdGEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidXBsb2FkIGltYWdlIHVybDogXCIsZGF0YS51cmwrXCIvXCIrZGF0YS5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5cblxuZnVuY3Rpb24gYWRkTG9naW5FdmVudCgpIHtcbiAgICAkKCcjbG9naW5fbW9kYWxfbG9naW5fYnRuJykuY2xpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpbnB1dElkID0gJCgnI2xvZ2luX21vZGFsX2lucHV0X2lkJykudmFsKCk7XG4gICAgICAgIHZhciBpbnB1dFB3ID0gJCgnI2xvZ2luX21vZGFsX2lucHV0X3B3JykudmFsKCk7XG4gICAgICAgIHZhciBwYXJhbXM7XG5cbiAgICAgICAgaWYgKCFpbnB1dElkKSB7XG4gICAgICAgICAgICBhbGVydChcIklucHV0IHlvdXIgSUQhXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5wdXRQdykge1xuICAgICAgICAgICAgYWxlcnQoXCJJbnB1dCB5b3VyIFBhc3N3b3JkIVwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGlkOiBpbnB1dElkLFxuICAgICAgICAgICAgcHc6IGlucHV0UHdcbiAgICAgICAgfTtcblxuICAgICAgICAkLmFqYXgoe1xuICAgICAgICAgICAgdXJsOiAnL2FqYXgvdXNlci9sb2dpbicsXG4gICAgICAgICAgICB0eXBlOiAnUE9TVCcsXG4gICAgICAgICAgICBkYXRhOiBwYXJhbXMsXG4gICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gZXJyb3JIYW5kbGVyKGpxWEhSLCB0ZXh0U3RhdHVzLCBlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiTG9naW4gZmFpbCEgKFNlcnZlciBlcnJvcilcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIoZGF0YSwgc3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb2RlID09PSAxICYmIGRhdGEubXNnID09PSBcImxvZ2luIHN1Y2Nlc3NcIikge1xuICAgICAgICAgICAgICAgICAgICAkKCcjbG9naW5fbW9kYWwnKS5tb2RhbCgnaGlkZScpO1xuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJDaGVjayB5b3VyIElEIGFuZCBQYXNzd29yZCFcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRKb2luRXZlbnQoKSB7XG4gICAgJCgnI2pvaW5fbW9kYWxfam9pbl9idG4nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIHJlZ1Rlc3QgPSAvXltBLVphLXowLTkrXSokLztcbiAgICAgICAgdmFyIGlucHV0SWQgPSAkKCcjam9pbl9tb2RhbF9pbnB1dF9pZCcpLnZhbCgpO1xuICAgICAgICB2YXIgaW5wdXRQdyA9ICQoJyNqb2luX21vZGFsX2lucHV0X3B3JykudmFsKCk7XG4gICAgICAgIHZhciBpbnB1dFB3Q29uZmlybSA9ICQoJyNqb2luX21vZGFsX2lucHV0X3B3X2NvbmZpcm0nKS52YWwoKTtcbiAgICAgICAgdmFyIGlucHV0TmFtZSA9ICQoJyNqb2luX21vZGFsX2lucHV0X25hbWUnKS52YWwoKTtcbiAgICAgICAgdmFyIHBhcmFtcztcblxuICAgICAgICBpZiAoIWlucHV0SWQgfHwgIXJlZ1Rlc3QudGVzdChpbnB1dElkKSkge1xuICAgICAgICAgICAgYWxlcnQoXCJJRCBpcyBhbGxvd2VkIG9ubHkgbnVtYmVyIGFuZCBhbHBoYWJlci5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpbnB1dFB3IHx8ICFyZWdUZXN0LnRlc3QoaW5wdXRQdykpIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiUGFzc3dvcmQgaXMgYWxsb3dlZCBvbmx5IG51bWJlciBhbmQgYWxwaGFiZXQuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaW5wdXROYW1lKSB7XG4gICAgICAgICAgICBhbGVydChcIklucHV0IHlvdXIgbmFtZS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0UHcgIT09IGlucHV0UHdDb25maXJtKSB7XG4gICAgICAgICAgICBhbGVydChcIklucHV0IHlvdXIgcGFzc3dvcmQuXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgICAgaWQ6IGlucHV0SWQsXG4gICAgICAgICAgICBwdzogaW5wdXRQdyxcbiAgICAgICAgICAgIG5hbWU6IGlucHV0TmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgICQuYWpheCh7XG4gICAgICAgICAgICB1cmw6ICcvYWpheC91c2VyL2pvaW4nLFxuICAgICAgICAgICAgdHlwZTogJ1BPU1QnLFxuICAgICAgICAgICAgZGF0YTogcGFyYW1zLFxuICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9ySGFuZGxlcihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIlNpZ251cCBmYWlsISAoU2VydmVyIGVycm9yKVwiKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiBzdWNjZXNzSGFuZGxlcihkYXRhLCBzdGF0dXMsIHhocikge1xuICAgICAgICAgICAgICAgIGFsZXJ0KFwiU2lnbnVwIHN1Y2Nlc3MhXCIpO1xuICAgICAgICAgICAgICAgICQoJyNqb2luX21vZGFsJykubW9kYWwoJ2hpZGUnKTtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBhZGRMb2dvdXRFdmVudCgpIHtcbiAgICAkKCcjbmF2X2xvZ291dF9idG4nKS5jbGljayhmdW5jdGlvbigpIHtcbiAgICAgICAgJC5hamF4KHtcbiAgICAgICAgICAgIHVybDogJy9hamF4L3VzZXIvbG9nb3V0JyxcbiAgICAgICAgICAgIHR5cGU6ICdQT1NUJyxcbiAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvckhhbmRsZXIoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSB7XG4gICAgICAgICAgICAgICAgYWxlcnQoXCJMb2dvdXQgZmFpbCEgKFNlcnZlciBlcnJvcilcIik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2Vzc0hhbmRsZXIoZGF0YSwgc3RhdHVzLCB4aHIpIHtcbiAgICAgICAgICAgICAgICBhbGVydChcIkxvZ291dCBzdWNjZXNzIVwiKTtcbiAgICAgICAgICAgICAgICBsb2NhdGlvbi5yZWxvYWQodHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufSIsIiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==